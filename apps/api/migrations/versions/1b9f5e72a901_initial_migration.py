# apps/api/migrations/versions/1b9f5e72a901_initial_migration.py
"""Initial migration

Revision ID: 1b9f5e72a901
Revises: 
Create Date: 2025-03-26 12:00:00.000000

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
import uuid


# revision identifiers, used by Alembic.
revision = '1b9f5e72a901'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('clients',
        sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False, default=uuid.uuid4),
        sa.Column('name', sa.String(), nullable=False),
        sa.Column('contact_person', sa.String(), nullable=True),
        sa.Column('phone', sa.String(), nullable=True),
        sa.Column('email', sa.String(), nullable=True),
        sa.Column('address', sa.String(), nullable=True),
        sa.Column('created_at', sa.DateTime(), nullable=False, default=sa.func.current_timestamp()),
        sa.Column('updated_at', sa.DateTime(), nullable=False, default=sa.func.current_timestamp(), onupdate=sa.func.current_timestamp()),
        sa.PrimaryKeyConstraint('id')
    )
    
    op.create_table('materials',
        sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False, default=uuid.uuid4),
        sa.Column('name', sa.String(), nullable=False),
        sa.Column('unit', sa.String(), nullable=False),
        sa.Column('description', sa.Text(), nullable=True),
        sa.Column('created_at', sa.DateTime(), nullable=False, default=sa.func.current_timestamp()),
        sa.Column('updated_at', sa.DateTime(), nullable=False, default=sa.func.current_timestamp(), onupdate=sa.func.current_timestamp()),
        sa.PrimaryKeyConstraint('id')
    )
    
    op.create_table('suppliers',
        sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False, default=uuid.uuid4),
        sa.Column('name', sa.String(), nullable=False),
        sa.Column('contact_person', sa.String(), nullable=True),
        sa.Column('phone', sa.String(), nullable=True),
        sa.Column('email', sa.String(), nullable=True),
        sa.Column('address', sa.String(), nullable=True),
        sa.Column('created_at', sa.DateTime(), nullable=False, default=sa.func.current_timestamp()),
        sa.Column('updated_at', sa.DateTime(), nullable=False, default=sa.func.current_timestamp(), onupdate=sa.func.current_timestamp()),
        sa.PrimaryKeyConstraint('id')
    )
    
    op.create_table('contracts',
        sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False, default=uuid.uuid4),
        sa.Column('client_id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('number', sa.String(), nullable=False),
        sa.Column('date', sa.Date(), nullable=False),
        sa.Column('markup_percentage', sa.Float(), nullable=False, default=0.0),
        sa.Column('status', sa.Enum('ACTIVE', 'INACTIVE', name='contractstatus'), nullable=False, default='ACTIVE'),
        sa.Column('expiration_date', sa.Date(), nullable=True),
        sa.Column('created_at', sa.DateTime(), nullable=False, default=sa.func.current_timestamp()),
        sa.Column('updated_at', sa.DateTime(), nullable=False, default=sa.func.current_timestamp(), onupdate=sa.func.current_timestamp()),
        sa.ForeignKeyConstraint(['client_id'], ['clients.id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    
    op.create_table('invoices',
        sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False, default=uuid.uuid4),
        sa.Column('number', sa.String(), nullable=False),
        sa.Column('date', sa.Date(), nullable=False),
        sa.Column('client_id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('supplier_id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('contract_id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('total_amount', sa.Float(), nullable=False, default=0.0),
        sa.Column('total_with_markup', sa.Float(), nullable=False, default=0.0),
        sa.Column('status', sa.Enum('CREATED', 'PROCESSED', 'CLOSED', name='invoicestatus'), nullable=False, default='CREATED'),
        sa.Column('created_at', sa.DateTime(), nullable=False, default=sa.func.current_timestamp()),
        sa.Column('updated_at', sa.DateTime(), nullable=False, default=sa.func.current_timestamp(), onupdate=sa.func.current_timestamp()),
        sa.ForeignKeyConstraint(['client_id'], ['clients.id'], ),
        sa.ForeignKeyConstraint(['contract_id'], ['contracts.id'], ),
        sa.ForeignKeyConstraint(['supplier_id'], ['suppliers.id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    
    op.create_table('invoice_items',
        sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False, default=uuid.uuid4),
        sa.Column('invoice_id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('material_id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('quantity', sa.Float(), nullable=False),
        sa.Column('price', sa.Float(), nullable=False),
        sa.Column('amount', sa.Float(), nullable=False),
        sa.Column('amount_with_markup', sa.Float(), nullable=False),
        sa.Column('created_at', sa.DateTime(), nullable=False, default=sa.func.current_timestamp()),
        sa.Column('updated_at', sa.DateTime(), nullable=False, default=sa.func.current_timestamp(), onupdate=sa.func.current_timestamp()),
        sa.ForeignKeyConstraint(['invoice_id'], ['invoices.id'], ),
        sa.ForeignKeyConstraint(['material_id'], ['materials.id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    
    op.create_table('transactions',
        sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False, default=uuid.uuid4),
        sa.Column('invoice_id', postgresql.UUID(as_uuid=True), nullable=True),
        sa.Column('client_id', postgresql.UUID(as_uuid=True), nullable=True),
        sa.Column('supplier_id', postgresql.UUID(as_uuid=True), nullable=True),
        sa.Column('type', sa.Enum('CLIENT_DEBT', 'SUPPLIER_DEBT', 'CLIENT_PAYMENT', 'SUPPLIER_PAYMENT', name='transactiontype'), nullable=False),
        sa.Column('amount', sa.Float(), nullable=False),
        sa.Column('date', sa.Date(), nullable=False),
        sa.Column('description', sa.Text(), nullable=True),
        sa.Column('created_at', sa.DateTime(), nullable=False, default=sa.func.current_timestamp()),
        sa.Column('updated_at', sa.DateTime(), nullable=False, default=sa.func.current_timestamp(), onupdate=sa.func.current_timestamp()),
        sa.ForeignKeyConstraint(['client_id'], ['clients.id'], ),
        sa.ForeignKeyConstraint(['invoice_id'], ['invoices.id'], ),
        sa.ForeignKeyConstraint(['supplier_id'], ['suppliers.id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    
    op.create_table('debt_movements',
        sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False, default=uuid.uuid4),
        sa.Column('period', sa.DateTime(), nullable=False),
        sa.Column('document_id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('document_type', sa.String(), nullable=False),
        sa.Column('client_id', postgresql.UUID(as_uuid=True), nullable=True),
        sa.Column('supplier_id', postgresql.UUID(as_uuid=True), nullable=True),
        sa.Column('amount', sa.Float(), nullable=False),
        sa.Column('direction', sa.Enum('DEBIT', 'CREDIT', name='debtdirection'), nullable=False),
        sa.Column('dimension', sa.Enum('CLIENT_DEBT', 'SUPPLIER_DEBT', name='debtdimension'), nullable=False),
        sa.Column('created_at', sa.DateTime(), nullable=False, default=sa.func.current_timestamp()),
        sa.Column('invoice_id', postgresql.UUID(as_uuid=True), nullable=True),
        sa.Column('transaction_id', postgresql.UUID(as_uuid=True), nullable=True),
        sa.ForeignKeyConstraint(['client_id'], ['clients.id'], ),
        sa.ForeignKeyConstraint(['invoice_id'], ['invoices.id'], ),
        sa.ForeignKeyConstraint(['supplier_id'], ['suppliers.id'], ),
        sa.ForeignKeyConstraint(['transaction_id'], ['transactions.id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    
    # Создание индексов
    op.create_index(op.f('ix_clients_name'), 'clients', ['name'], unique=False)
    op.create_index(op.f('ix_suppliers_name'), 'suppliers', ['name'], unique=False)
    op.create_index(op.f('ix_materials_name'), 'materials', ['name'], unique=False)
    op.create_index(op.f('ix_contracts_client_id'), 'contracts', ['client_id'], unique=False)
    op.create_index(op.f('ix_contracts_number'), 'contracts', ['number'], unique=False)
    op.create_index(op.f('ix_invoices_client_id'), 'invoices', ['client_id'], unique=False)
    op.create_index(op.f('ix_invoices_supplier_id'), 'invoices', ['supplier_id'], unique=False)
    op.create_index(op.f('ix_invoices_contract_id'), 'invoices', ['contract_id'], unique=False)
    op.create_index(op.f('ix_invoices_number'), 'invoices', ['number'], unique=False)
    op.create_index(op.f('ix_invoice_items_invoice_id'), 'invoice_items', ['invoice_id'], unique=False)
    op.create_index(op.f('ix_transactions_client_id'), 'transactions', ['client_id'], unique=False)
    op.create_index(op.f('ix_transactions_supplier_id'), 'transactions', ['supplier_id'], unique=False)
    op.create_index(op.f('ix_transactions_invoice_id'), 'transactions', ['invoice_id'], unique=False)
    op.create_index(op.f('ix_debt_movements_client_id'), 'debt_movements', ['client_id'], unique=False)
    op.create_index(op.f('ix_debt_movements_supplier_id'), 'debt_movements', ['supplier_id'], unique=False)
    op.create_index(op.f('ix_debt_movements_dimension'), 'debt_movements', ['dimension'], unique=False)
    op.create_index(op.f('ix_debt_movements_period'), 'debt_movements', ['period'], unique=False)
    
    # Создаем SQL для представления DebtBalances
    op.execute("""
    CREATE OR REPLACE VIEW debt_balances_view AS
    SELECT 
        uuid_generate_v4() as id,
        client_id,
        supplier_id,
        dimension,
        (SUM(CASE WHEN direction = 'DEBIT' THEN amount ELSE 0 END) - 
         SUM(CASE WHEN direction = 'CREDIT' THEN amount ELSE 0 END)) as balance,
        NOW() as as_of_date
    FROM 
        debt_movements
    GROUP BY 
        client_id, supplier_id, dimension;
    """)
    
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute("DROP VIEW IF EXISTS debt_balances_view")
    
    op.drop_index(op.f('ix_debt_movements_period'), table_name='debt_movements')
    op.drop_index(op.f('ix_debt_movements_dimension'), table_name='debt_movements')
    op.drop_index(op.f('ix_debt_movements_supplier_id'), table_name='debt_movements')
    op.drop_index(op.f('ix_debt_movements_client_id'), table_name='debt_movements')
    op.drop_index(op.f('ix_transactions_invoice_id'), table_name='transactions')
    op.drop_index(op.f('ix_transactions_supplier_id'), table_name='transactions')
    op.drop_index(op.f('ix_transactions_client_id'), table_name='transactions')
    op.drop_index(op.f('ix_invoice_items_invoice_id'), table_name='invoice_items')
    op.drop_index(op.f('ix_invoices_number'), table_name='invoices')
    op.drop_index(op.f('ix_invoices_contract_id'), table_name='invoices')
    op.drop_index(op.f('ix_invoices_supplier_id'), table_name='invoices')
    op.drop_index(op.f('ix_invoices_client_id'), table_name='invoices')
    op.drop_index(op.f('ix_contracts_number'), table_name='contracts')
    op.drop_index(op.f('ix_contracts_client_id'), table_name='contracts')
    op.drop_index(op.f('ix_materials_name'), table_name='materials')
    op.drop_index(op.f('ix_suppliers_name'), table_name='suppliers')
    op.drop_index(op.f('ix_clients_name'), table_name='clients')
    
    op.drop_table('debt_movements')
    op.drop_table('transactions')
    op.drop_table('invoice_items')
    op.drop_table('invoices')
    op.drop_table('contracts')
    op.drop_table('suppliers')
    op.drop_table('materials')
    op.drop_table('clients')
    
    # Удаляем типы Enum
    op.execute("DROP TYPE IF EXISTS debtdimension")
    op.execute("DROP TYPE IF EXISTS debtdirection")
    op.execute("DROP TYPE IF EXISTS transactiontype")
    op.execute("DROP TYPE IF EXISTS invoicestatus")
    op.execute("DROP TYPE IF EXISTS contractstatus")
    # ### end Alembic commands
